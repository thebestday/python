print('3.5 КОРТЕЖИ И МНОЖЕСТВА')
print('КОРТЕЖИ ЭТО ТОТ ЖЕ САМЫЙ СПИСОК ТОЛЬКО НЕИЗМЕНЯЕМЫЙ')
print('Множества это контейнеры в которых хранятся только не повторяющиеся элементы в случайном порядке')
print('МНожества не используются чтобы по нему итерироваться')
print('Самое главное свойство множества -это то что из набора элементов где может несколько одинаковых - получаем ТОЛЬКО УНИКАЛЬНЫЕ ЭЛЕМЕНТЫ ')

print('')
print('ИНИЦИАЛИЗАЦИЯ')
print('Множества Инициализация c пустыми фигурными скобками temp_set = {} дает словарь ')# Множества Инициализация c пустыми фигурными скобками дает словарь - что бы получить set нужно наполнить значениями
temp_set = {}
print(type(temp_set), temp_set) # <class 'dist'> {}
print('что бы получить set нужно наполнить значениями temp_set = {1, 2, 3, 1, 2, 3, 4}')
temp_set = {1, 2, 3, 1, 2, 3, 4}
print(type(temp_set), temp_set) # <class 'set'> {1, 2, 3}

print('')
print(' инициализация множества (set) через приведение типов') # инициализация через приведение типов
print('есть уже созданный лист temp_list = [1,2,1,2,2,3,4,12,32]')
temp_list = [1,2,1,2,2,3,4,12,32]
print(type(temp_list), temp_list)
print('применяем функцию set()  temp_set = set(temp_list)  которая является инициализатором множества к этому листу- то получим только уникальные элементы')
temp_set = set(temp_list)
print(type(temp_set), temp_set) # <class 'set'> {32, 1, 2, 3, 4, 12}
print('')

print('ОБращение к элементам множества ')
print('Можно проверять лежит ли элемент во множестве с помощью операции ( .. in .. ) > True / False')
print('print(100 in temp_set)')
print(100 in temp_set)


print('')
print(' Давайте проитерируемся по множеству')
print(' У ОБЪКТОВ МНОЖЕСТВА НЕТ ИНДЕКСОВ - поэтому итерируемся такой конструкцией')# У ОБЪКТОВ МНОЖЕСТВА НЕТ ИНДЕКСОВ - поэтому итерируемся такой конструкцией
for element in temp_set:
    print(element)

 # Функции с множествами
 # все как в списках

print('')
print('МНОЖЕСТВА ЧАСТО ИСПОЛЬЗУЮТ ДЛЯ ПОЛУЧЕНИЯ УНИКАЛЬНЫХ ЭЛЕМЕНТОВ ИЗ СПИСКА')
print('С МНОЖЕСТВОМ ЕСТЬ ОПЕРАЦИИ- ОБЕДИНЕНИЯ UNION ПЕРЕСЕЧЕНИЯ INTERSECTION РАЗНОСТИ DIFFERENCE СИММЕТРИЧЕСКАЯ РАЗНОСТЬ SYMMETRIC DIFFERENCE')
 # Операции с множествами (объединение, пересечение, разность ,симметрическая разность)

print('РАССМОТРИМ ПРИМЕР ПЕРЕСЕЧЕНИЯ union')
print(" возьмем два множества - мы их конвертируем из листов и объеденим их - метод (union)")
print('my_set_1 = set([1, 2, 3, 4, 5])')
my_set_1 = set([1, 2, 3, 4, 5])

print('my_set_2 = set([5, 6, 7, 8, 9])')
my_set_2 = set([5, 6, 7, 8, 9])
print('Объединяем их my_set_3 = my_set_1.union(my_set_2) к первому присоединяем второй')
my_set_3 = my_set_1.union(my_set_2)
print(my_set_3)

print('Разность  difference выкидываем из множества  set([1, 2, 3, 4, 5]) то что есть общего(пересечение) с этим set([5, 6, 7, 8, 9])') # Разность  difference выкидываем из множества  set([1, 2, 3, 4, 5]) то что есть общего(пересечение) с этим set([5, 6, 7, 8, 9])
print('ВЫКИНУЛИ 5 из первого ')
my_set_4 = my_set_1.difference(my_set_2)
print(my_set_4)
print('ВЫКИНУЛИ 5 из второго')
my_set_5 = my_set_2.difference(my_set_1)
print(my_set_5)
