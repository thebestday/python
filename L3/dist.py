# Инициализация словарей
dict_temp = {}
print(type(dict_temp), dict_temp)
# сделаем словарь где все значения имеют разные типы
# словарь наполненный некоторыми объектами

dict_temp = {'key1': 1, 'key2': 2.1, 'key3': 'name', 'key4': [1,2,3]}
print(type(dict_temp), dict_temp)

# еще один метод инициализации словарей  dict.fromkeys
# dict это класс
# fromkeys это метод
# будет создан словарь у которого ключами являются элементы a  и b
# а значения будут пустыми
# fromkeys(seq[, value]) -> dict Новый словарь, созданный из последовательности.
#dict_temp = dict.fromkeys(['a','b'])
# при заданном value, значением каждого элемента словаря явится один и тот же экземпляр

print(type(dict_temp), dict_temp)
# что бы наполнить значениями нужно подать еще одни список

dict_temp = dict.fromkeys(['a','b'], 10)

print(type(dict_temp), dict_temp)

#Если необходимо создать словарь с заранее подготовленным набором данных, но с перечислением групп ключ-значение
# функция dict()

dict_temp = dict(brend ='volvo', volume_engine = 1.5)
print(type(dict_temp), dict_temp)

# обращение к содержимому словаря по ключу
print(dict_temp['brend'])

# мы можем инициализировать словарь с помощью генератора
dict_temp = {a: a**2 for a in range(10)}

print(type(dict_temp), dict_temp)
print(dict_temp[5])

# Обращение к содержимому часто бывает необходимо знать все ключи словаря и все значения)
# Функции со словарями
# Получим все ключи словаря  функция keys()
# функция возвращает специальный тип - называется dict_key

print(dict_temp.keys())
print(list(dict_temp.keys()))
# dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# но как правило с этим типом не работают а приводят к типу list
# все необходимые операции делают с list -ом
# но так же можно получить значение
print(list(dict_temp.values()))

# Так же можно работать с парами ключ-значение
# для этого необходимо использовать метед items()
# метод возращает кортежи - лист кортежей
print(list(dict_temp.items()))

# кортеж это тот же самый лист только неизменяемый


# РАБОТА С ЭЛЕМЕНТАМИ
# присвоим нулевому ключу другое значение = 1000
dict_temp[0] = 100
print(type(dict_temp), dict_temp)

# можем добавлять какие-то значение -делается это путем присваивания
# например несуществуещему ключу name присвоим значение Dima
dict_temp['name'] = 'Dima'
print(type(dict_temp), dict_temp)

# МЕТОД ОГРОМНОЕ МНОЖЕСТВО (часть уже рассмотрели выше - это keys() values() items() см выше
# Словарь можно очищать копировать
# МОжно удалять значение по ключу - метод pop() УДАЛЯЕТ КЛЮЧ И ВОЗРАЩАЕТ ЗНАЧЕНИЕ !!!!!!!!!!!!!11
dict_temp.pop('name')

print(type(dict_temp), dict_temp)

# МОЖНО ИТЕРИРОВАТЬСЯ ПО СЛОВАРЮ
# ИТЕРИРОВАТЬСЯ МОЖНО ТАК ЖЕ КАК И ПО СПИСКАМ
# МЫ ПО ПАРАМ КЛЮЧ ЗНАЧЕНИЯ ИТЕРИРУЕМСЯ В СЛОВАРЕ dict_temp.items()
# ИТЕРИРОВАНИЕ ПО СЛОВАРЮ ПО КЛЮЧУ И ПО ЗНАЧЕНИЮ ОБА ВАРИАНТА РАССМОТРИМ
for pair in dict_temp.items():
    print(pair)

 # pair это пара но удобнее работать с конкретными элементами - ключом и его значением
for key, value in dict_temp.items():
    print(key, value)

# можно итерироваться и по ключам
for key in dict_temp.keys():
    print(key)

# можно итерироваться по значениям
for value in dict_temp.values():
    print(value)