# ОБъект list  СПИСКИ
# СПИСКИ В ОТЛИЧИИ ОТ СТРОК ЭТО ИЗМЕНЯЕМЫЙ ТИИ ДАННЫХ
# универсальный инструмент для хранения любого вида объекта
# list представляет из себя массив
# доступ к объету листа ( можно обратиться по индексу) получить значение
# так же у листов предусмотрены срезы все то же самое как и у строк
#List = [0, 1, 2, 4, 5]
# классаня вещь в питоне это ГЕНЕРАЦИЯ СПИСКОВ
#[ x**2 for x in num if x > 0]
# т.е сразу делаем и отсев(условие в конце) и фильтрацию и пременение функции9в самом начале - генаратор списков)
# это x по которым осуществляем перебор из массива num
# ПУСТОЙ СПИСОК ГЕНЕРИРУЕТСЯ С ПОМОЩЬЮ Квадратных скобок
# list_temp = []
# print(type(list_temp))
# список можно заполнять любыми объектами, делается это через запятую
list_temp = [1, 2, 123, 'Volvo', [1,2,3]]
#пройдемся по элементам списка
for el in list_temp:
    print(el, type(el))

# также инициализировать список можно с помощью команды list (это похоже на приведение типов)
list_str = list('Volvo')
print(list_str)
#  у нас строка представилась в виде отдельных букв и каждая отдельная буква представляет собой элемент
# списка list_str

# Обращение к элементам списка, подсписки (так же как и у строк)
for i in range(len(list_str)):
    print(i, ':', list_str[i])

# срезы (тоже в цикле сделаем) c i -того элемента и до конца

for i in range(len(list_str)):
    print(i, ':', list_str[i:])

# срезы (тоже в цикле сделаем) c начала и до i -того элемента

for i in range(len(list_str)):
    print(i, ':', list_str[:i])

# Функции со списками (len() универсальная функция которая подразумевает длину объекта)
print(len(list_str))

# Операции со списком
# Операция + т.е фактически конкатенация двух списков
# и доступно внешнее умножнение на целые числа (в примере из двух списков создался один список)
print(list_temp + list_str)
print(list_temp*2)


# Методы важная тема для списков 8-24
# append это метод для добавления в конец

integer_list = []

for i in range(5):
    integer_list.append(i)

print(integer_list)
integer_list.append(100)
print(integer_list)

#  remove (по сути удаление первого встретившегося соответствующего элемента)
#  удаляет первый элемент по вхождению

integer_list.remove(100)
print(integer_list)

# del integer_list[4] удалить элемент по его индексу
del integer_list[4]
print(integer_list)

# reverse изменить порядок - НУЖНО ДЕЛАТЬ ВНАЧАЛЕ (чтобы метод применился) - ПОТОМ print
integer_list.reverse()
print(integer_list)

# sort это метод сортировки листа в порядке возврастания
integer_list = [9, 3, 6, 2, 4]

integer_list.sort()
print(integer_list)

# insert(позициякудавтавлять, точтобудемвставлять)
integer_list.insert(2, 1000)
print(integer_list)

# функция map принимает два аргумента: функцию и аргумент составного типа данных, например, список.
# например мы хотим каждый элемент списка возвести в квадрат
# но сначла нужно привести к типу list
# map(function, list) ----> map -----> list(map)
integer_list = [9, 3, 6, 2, 4]

# функция str применяется к каждому элементу  integer_list
# lambda x , каждому элемнту х применяется функция хх*2
new_integer_list = list(map(lambda x: x**2, integer_list))
print(new_integer_list)              # элемент стал строкой после применения метода str

# функция фильтр - фильтрация списка согласно некоторому условию
# придется применить функцию лямбда для фильтрации списка
# filter
# те которые меньше 5 остаются в новом списке
new_integer_list = list(filter(lambda x: x < 5, integer_list))
print(new_integer_list)

# reduce применяется ко всем элементам списка
#  и возвращает один элемент
# например найдем сумму данного списка с помомощью функции reduce()
# х - это то что было
# у - это новый элемент
from functools import reduce
integer_list = [1,2,3,4]
sum = reduce(lambda x, y: x + y, integer_list)
print(sum)
product = reduce(lambda x, y: x * y, integer_list)
print(product)

