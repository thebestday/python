from flask import Flask, render_template

# Render рендеринг это процесс создания html документа и последующего демонстрацию пользователю
# будем использовать шаблонизатор что бы хоть как-то оживить html документ
# шаблонизатор это отдельный язык который используют для вставки каких то простейших данных
# первое что хотелось бы сделать - это войти в режим дебага
# что бы те преобразования которые сделаны с кодом отобразились на сайте - необходимо запустить заново сервер
# что бы этого не делать можно войит в режим (debug = True) как параметры метода run  app.run(debug = True)
# теперь все изменения будут автоматически подхватываться - мы будем видеть их в режиме реального времени
# https://ru.wikibooks.org/wiki/Flask


app = Flask(__name__)


# мы хотим что бы при обращении к страницам main  contacts происходил рендеринг  html документа
# ЭТО ДЕЛАЕТСЯ СЛЕДУЮЩИМ ОБРАЗОМ - ПО УМОЛЧАНИЮ ВО flask все html формы должны находится в специалной директории которая называется templates
# flask автоматически будет туда обращаться - стучаться если будет производиться рендеринг html форм
# в templates делаем парочку html документов main.html и  contacts.html
# теперь нам необходимо flask_example сказать что по вызову страницы main мы должны рендерить mail.html - это делается с помошбю специального метода
# который называется render_template - его нужно импортировать из Flask - можно даже настраивать откуда будут рендериться элементы но по умолчанию из папки templates
# данные передаются в функцию render_template

@app.route('/')
@app.route('/main')
def hello():
    # return 'Hello, World!'
    return render_template('main.html')


# создадим еще страницу с контактами
@app.route('/contacts')
def contacts():
    data = {'model': 'Volve', 'price': 1.5}
    # return 'This is contact page!'
    # теперь мы хотим сделать некоторую динамику - при редндеринге передать некоторые данные которые будут вставляться
    # model = 'Volvo'
    # price = 1.5
    # return render_template('contacts.html', model = model, price= price)
    # но в таком виде передать не очень удобно - обычно передают в упакованном виде - например с помощью dict
    # обычно так и работают - передают в словаре- потому что по словарю гораздо удобнее искать
    return render_template('contacts.html', data = data)



if __name__ == "__main__":
    app.run(debug=True)
